package string;

/**
You have n  tiles, where each tile has one letter tiles[i] printed on it.
Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.
Example 1:
Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:
Input: tiles = "AAABBC"
Output: 188*/
public class TilePossibilities {
    public int numTilePossibilities(String tiles) {
        int[] freq = new int[26];
        for (char c : tiles.toCharArray()) {
            freq[c - 'A']++;
        }
        return backtrack(freq);
    }

    private int backtrack(int[] freq) {
        int count = 0;

        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                freq[i]--;
                count += 1;
                count += backtrack(freq);
                freq[i]++;
            }
        }

        return count;
    }

    public static void main(String[] args) {
        TilePossibilities solver = new TilePossibilities();

        String tiles1 = "AAB";
        System.out.println("Input: " + tiles1);
        System.out.println("Output: " + solver.numTilePossibilities(tiles1)); // Output: 8
    }
}
